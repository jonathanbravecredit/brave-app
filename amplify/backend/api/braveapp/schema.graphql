type Query {
  transunion(action: String!, message: String!): String
}

type AppData
  @model
  @auth(rules: [{ allow: owner }, { allow: private, provider: iam, operations: [read, update, create, delete] }]) {
  id: ID!
  user: User!
  agencies: Agencies!
  preferences: Preferences!
}
type User {
  id: ID!
  userAttributes: UserAttributes
  onboarding: Onboarding
}
type Name {
  first: String!
  middle: String
  last: String!
}
type UserAttributes {
  name: Name
  address: Address
  phone: Phone
  dob: Dob
  ssn: Ssn
}
type Address {
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zip: String!
}
type Phone {
  primary: String!
}
type Dob {
  year: String!
  month: String!
  day: String!
}
type Ssn {
  lastfour: String!
  full: String
}
type Onboarding {
  lastActive: Int!
  lastComplete: Int!
  started: Boolean
}
type OnboardingStep {
  id: Int
  active: Boolean
  complete: Boolean
  name: String
}
type Agencies {
  transunion: Transunion
  equifax: Equifax
  experian: Experian
}
type Preferences {
  showAllAccounts: ShowAccountsPreference
}
type ShowAccountsPreference {
  creditCards: Boolean
  collectionsAccounts: Boolean
  installmentLoans: Boolean
  mortgages: Boolean
}
type Transunion {
  id: ID!
  authenticated: Boolean
  indicativeEnrichmentSuccess: Boolean
  getAuthenticationQuestionsSuccess: Boolean
  serviceBundleFulfillmentKey: String
  currentRawQuestions: String
  currentRawAuthDetails: String
  enrollmentKey: String
  enrollReport: TUReportResponse
  enrollMergeReport: TUReportResponse
  enrollVantageScore: TUReportResponse
  enrolled: Boolean
  enrolledOn: String
  fulfillReport: TUReportResponse
  fulfillMergeReport: TUReportResponse
  fulfillVantageScore: TUReportResponse
  fulfilledOn: String
  acknowledgedDisputeTerms: Boolean
  acknowledgedDisputeTermsOn: String
  disputeServiceBundleFulfillmentKey: String
  disputeEnrollmentKey: String
  disputeEnrolled: Boolean
  disputeEnrolledOn: String
  disputeStatus: String
}
type Equifax {
  authenticated: Boolean
}
type Experian {
  authenticated: Boolean
}
type TUReportResponse {
  id: ID!
  bureau: String
  errorResponse: String
  serviceProduct: String
  serviceProductFullfillmentKey: String
  serviceProductObject: AWSJSON
  serviceProductTypeId: String
  serviceProductValue: String
  status: String
}
# type Disputes
#   @model
#   @auth(rules: [{ allow: owner }, { allow: private, provider: iam, operations: [read, update, create, delete] }])
#   @key(
#     name: "byAppData"
#     fields: [
#       "agencyId"
#       "disputeId"
#       "disputeStatus"
#       "openedOn"
#       "closedOn"
#       "disputeResults"
#       "notificationStatus"
#       "notificationMessage"
#       "notificationSentOn"
#     ]
#   ) {
#   id: ID!
#   agencyId: ID!
#   disputeId: String
#   disputeStatus: String
#   openedOn: String
#   closedOn: String
#   disputeResults: AWSJSON
#   notificationStatus: String
#   notificationMessage: AWSJSON
#   notificationSentOn: String
# }
