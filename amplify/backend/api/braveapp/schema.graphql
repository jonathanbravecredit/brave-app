type Query {
  transunion(action: String!, message: String!): String
}
type AppData
  @model
  @auth(
    rules: [
      { allow: owner }
      {
        allow: private
        provider: iam
        operations: [read, update, create, delete]
      }
    ]
  ) {
  id: ID!
  user: User!
  agencies: Agencies!
}
type User {
  id: ID!
  userAttributes: UserAttributes
  onboarding: Onboarding
}
type Name {
  first: String!
  middle: String
  last: String!
}
type UserAttributes {
  name: Name
  address: Address
  phone: Phone
  dob: Dob
  ssn: Ssn
}
type Address {
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zip: String!
}
type Phone {
  primary: String!
}
type Dob {
  year: String!
  month: String!
  day: String!
}
type Ssn {
  lastfour: String!
  full: String
}
type Onboarding {
  lastActive: Int!
  lastComplete: Int!
  started: Boolean
}
type OnboardingStep {
  id: Int
  active: Boolean
  complete: Boolean
  name: String
}
type Agencies {
  transunion: Transunion
  equifax: Equifax
  experian: Experian
}
type Transunion {
  authenticated: Boolean
  indicativeEnrichmentSuccess: Boolean
  getAuthenticationQuestionsSuccess: Boolean
  serviceBundleFulfillmentKey: String
  currentRawQuestions: String
  currentRawAuthDetails: String
  enrollmentKey: String
  enrollReport: TUEnrollResponse
  enrollMergeReport: TUEnrollMergeReport
  enrollVantageScore: TUEnrollVantageScore
}
type Equifax {
  authenticated: Boolean
}
type Experian {
  authenticated: Boolean
}
type TUEnrollResponse {
  bureau: String
  errorResponse: String
  serviceProduct: String
  serviceProductFullfillmentKey: String
  serviceProductObject: String
  serviceProductTypeId: String
  serviceProductValue: String
  status: String
}
type TUEnrollVantageScore {
  bureau: String
  errorResponse: String
  serviceProduct: String
  serviceProductFullfillmentKey: String
  serviceProductObject: MergeReport
  serviceProductTypeId: String
  serviceProductValue: String
  status: String
}
type TUEnrollMergeReport {
  bureau: String
  errorResponse: String
  serviceProduct: String
  serviceProductFullfillmentKey: String
  serviceProductObject: MergeReport
  serviceProductTypeId: String
  serviceProductValue: String
  status: String
}
type VantageScore {
  CreditScoreType: CreditScoreType
}
type CreditScoreType {
  CreditScoreFactor: [CreditScoreFactor]
  CreditScoreModel: String
  NoScoreReason: String
  Source: Source
}
type CreditScoreFactor {
  Factor: String
  FactorText: [String]
}

type MergeReport {
  TrueLinkCreditReportType: TrueLinkCreditReportType
}
type TrueLinkCreditReportType {
  SB168Frozen: String
  Borrower: Borrower
  TradeLinePartition: [TradeLinePartition]
  InquiryPartition: InquiryPartition
  Message: [Message]
  Summary: Summary
}
type Borrower {
  BorrowerAddress: BorrowerAddress
  Birth: BorrowerBirth
  CreditScore: BorrowerCreditScore
  SocialPartition: BorrowerSocialPartition
}
type BorrowerAddress {
  CreditAddress: String
  Dwelling: String
  Origin: String
  Ownership: String
  Source: Source
}
type BorrowerBirth {
  BirthDate: String
  Source: Source
}
type BorrowerCreditScore {
  CreditScoreFactor: [CreditScoreFactor]
  CreditScoreMode: String
  NoScoreReason: String
  Source: Source
}
type BorrowerSocialPartition {
  Social: BorrowerSocialPartitionSocial
}
type BorrowerSocialPartitionSocial {
  SocialSecurityNumber: String
  Source: Source
}
type TradeLinePartition {
  Tradeline: TradelinePartitionTradeline
}
type TradelinePartitionTradeline {
  AccountCondition: String
  AccountDesignator: String
  DisputeFlag: String
  IndustryCode: String
  OpenClosed: String
  PayStatus: String
  VerificationIndicator: String
  Remark: TradelineRemark
  GrantedTrade: TradelineGrantedTrade
  Source: Source
}
type TradelineRemark {
  RemarkCode: String
}
type TradelineGrantedTrade {
  AccountType: String
  CreditType: String
  PaymentFrequency: String
  TermType: String
  WorstPayStatus: String
  PayStatusHistory: TradelineGrantedTradePayStatusHistory
  CreditLimit: String
}
type TradelineGrantedTradePayStatusHistory {
  MonthlyPayStatus: [String]
}
type InquiryPartition {
  Inquiry: InquiryPartitionInquiry
}
type InquiryPartitionInquiry {
  IndustryCode: String
  Source: Source
}
type Message {
  code: String
  type: String
}
type Summary {
  TradelineSummary: TransunionSummary
  InquirySummary: TransunionSummary
  PublicRecordSummary: TransunionSummary
  Sources: SummarySources
  SafetyCheckPassed: String
}
type SummarySources {
  Source: SummarySource
}
type SummarySource {
  Bureau: String
  InquiryDate: String
  OriginalData: String
}
type TransunionSummary {
  TransUnion: String
}
type Source {
  BorrowerKey: String
  Bureau: String
  InquiryDate: String
  Reference: String
}
